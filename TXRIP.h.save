#ifndef __TXRIP_H__
#define __TXRIP_H__

#define WINDOWX 1000
#define WINDOWY 600

#include "TXLib.h" //подключение библиотеки



class Karta //создание класса
{
private:
    HDC photo; // указатель на загруженную картинку
    COLORREF color; // цвет

    int x; //положение загруженной картинки на холсте по оси ох
    int y; //положение загруженной картинки на холсте по оси оу
    int x1; //положение левого верхнего угла прямоугольника копируемой области по оси ох
    int y1; //положение левого верхнего угла прямоугольника копируемой области по оси оу
    int stx; //стартовое положения картинки по оси ох
    int sty; //стартовое положения картинки по оси оу
    int n; //количество столбцов в массиве
    int m; //количество строк в массиве
    int height; //высота копируемой области с картинки
    int width; //ширина копируемой области с картинки

    double scalex; //переменная позволяющая изменять размер картинки на холсте по оси ох
    double scaley; //переменная позволяющая изменять размер картинки на холсте по оси оу

    int ground[10][10]; //массив карты лежащий в karta.txt
public:
    Karta(): //конструктор класса
    photo(txLoadImage("karta.bmp")),color(TX_WHITE),height(312),width(308),scalex(0.2),scaley(0.2),x(50),y(-312*0.2),x1(657),y1(656),stx(x),sty(y),n(10),m(10)
    {
        if(!photo) //проверка на наличие файла со српайтом
        {
            txMessageBox("Не найден файл со спрайтами карты","Ошибка #2");
            exit(0);
        }
    }

    ~Karta() //деструктор класса
    {
        txDeleteDC(photo); //удаление картинки из памяти
    }

    int init() //инициализация карты
    {
        FILE* f;
        f = fopen("karta.txt", "r"); //открытие файла karta.txt
        if (f==NULL) //проверка на наличие файлы с матрицей
        {
            txMessageBox("Не найден файл с картой","Ошибка #1");
            return 1;
        }
        fscanf(f, "%d%d\n",&n,&m ); //считывание кол-во столбцов и строк в массиве
        for (int i = 0; i < n; i++)
        {
            for(int j = 0; j < m; j++)
            {
                fscanf(f, "%d", &ground[i][j]); //считывание самого массива
            }
            fscanf(f,"\n");
        }
        fclose(f); //закрытие файла

        return 0;
    }

    void draw() //отрисовка карты
    {
        for (int i = 0; i < n; i++)
        {
            if(i>=1) //переход на следующую строчку в массиве
                y=y+height*scaley;  //смещение положения одного квадратика карты по оу
            for(int j = 0; j < m; j++)
            {
                if(j>=1) //переход на следующий столбец в массиве
                    x=x+width*scalex; //смещение положения одного квадратика карты по ох
                if(ground[i][j]==-2) //проверка на наличие числа в ячейке и отрисовка определенного квадратика
                {
                    Win32::TransparentBlt (txDC(), x, y , width*scalex, height*scaley, photo, x1, y1, width, height, color); //рисование
                }
                else if(ground[i][j]==-1) //проверка на наличие числа в ячейке и отрисовка определенного квадратика
                {
                    Win32::TransparentBlt (txDC(), x, y, width*scalex, height*scaley, photo, 3, 985 , width, height, color); //рисование
                }
                else if(ground[i][j]==-3) //проверка на наличие числа в ячейке и отрисовка определенного квадратика
                {
                    Win32::TransparentBlt (txDC(), x, y, width*scalex, height*scaley, photo, 990, 985 , width, height, color); //рисование
                }
                if(j==m-1) //проверка на конец строки
                {
                    x=stx;
                }
                if(i==n-1 && j==m-1) //проверка на конец столбца
                {
                    y=sty;

                }
            }
        }
    }

    int get_height() {return height;} //функция геттер для использования в другом .h файле высоты коопируемой области

    int get_width() {return width;} //функция геттер для использования в другом .h файле ширины коопируемой области

    double get_scalex() {return scalex;} //функция геттер для изменения ширины на копируемой области на холсте
    int get_x() {return x;}
    int get
};

#endif
